global:
  hostname: ""
  email: "admin@openbalena.io"
  password: "password"
  production-mode: true
  ssh-authorized-keys: ""

  promtail:
    server: "openbalena-promtail-syslog"
    port: 1514

  db:
    user: "docker"
    password: "password"

  s3:
    buckets: "registry-data;image-data;loki"
    registryBucket: "registry-data"
    registryStoragePath: "/data"
    imageBucket: "image-data"
    imageStoragePrefix: "images"
    endpoint: ""
    region: "us-east-1"
    accesskey: ""
    secretkey: ""

    cloudfront:
      endpoint:
      keypair:
      privatekey:

  keys:
    cookie-secret:
    jwt-secret:
    service-api-key:
    api-vpn-service-api-key:
    registry-secret-key:
    token-auth-builder-token:
    vpn-dhparams:

secrets:
  create: true

ingress:
  ingressClassName: openbalena-haproxy
  annotations: {}
  http:
    annotations: {}
  tunnel:
    annotations: {}
  vpn:
    annotations: {}

api:
  replicas: 1
  image:
    repository: balena/open-balena-api
    tag: "v14.13.3"
    pullPolicy: IfNotPresent

  labels: {}
  annotations:
    reloader.stakater.com/auto: "true"
  affinity: {}
  resources: {}
  nodeSelector:
    kubernetes.io/arch: amd64

  service:
    labels: {}
    annotations: {}
    externalIPs: []

  sentry-dsn: ""

  lokiHost: openbalena-loki-write
  lokiPort: 9095
  lokiWritePct: 100

  contractsPrivateRepoOwner:
  contractsPrivateRepoName:
  contractsPrivateRepoBranch:
  contractsPrivateRepoToken:

vpn:
  replicas: 1
  image:
    repository: balena/open-balena-vpn
    tag: "v11.29.17"
    pullPolicy: IfNotPresent

  labels: {}
  annotations:
    reloader.stakater.com/auto: "true"
  affinity: {}
  resources: {}
  nodeSelector:
    kubernetes.io/arch: amd64

  service:
    labels: {}
    annotations: {}
    externalIPs: []

  sentry-dsn: ""

registry:
  replicas: 1
  image:
    repository: balena/open-balena-registry
    tag: "v2.39.23"
    pullPolicy: IfNotPresent

  disableRedirect: false
  disableUploadPurging: true

  labels: {}
  annotations:
    reloader.stakater.com/auto: "true"
  affinity: {}
  resources: {}
  nodeSelector:
    kubernetes.io/arch: amd64

  service:
    labels: {}
    annotations: {}
    externalIPs: []

s3:
  enabled: true
  replicas: 1
  image:
    repository: balena/open-balena-s3
    tag: "v2.28.12"
    pullPolicy: IfNotPresent

  labels: {}
  annotations:
    reloader.stakater.com/auto: "true"
  affinity: {}
  resources: {}
  nodeSelector:
    kubernetes.io/arch: amd64

  service:
    labels: {}
    annotations: {}
    externalIPs: []

  storage: "25Gi"
  storageClass:

db:
  replicas: 1
  image:
    repository: balena/open-balena-db
    tag: "v5.2.1"
    pullPolicy: IfNotPresent

  labels: {}
  annotations:
    reloader.stakater.com/auto: "true"
  affinity: {}
  resources: {}
  nodeSelector:
    kubernetes.io/arch: amd64

  service:
    labels: {}
    annotations: {}
    externalIPs: []

  storage: "10Gi"
  storageClass:

  ## Start PostgreSQL pod without limitations on shm memory.
  ## By default docker and containerd limit `/dev/shm` to `64M`
  ## ref: https://github.com/docker-library/postgres/issues/416
  ## ref: https://github.com/containerd/containerd/issues/3654
  ##
  shmVolume:
    ## @param db.shmVolume.enabled Enable emptyDir volume for /dev/shm for PostgreSQL pod(s)
    ##
    enabled: true
    ## @param db.shmVolume.sizeLimit Set this to enable a size limit on the shm tmpfs
    ## Note: the size of the tmpfs counts against container's memory limit
    ## e.g:
    ## sizeLimit: 1Gi
    ##
    sizeLimit: ""

redis:
  replicas: 1
  image:
    repository: redis
    tag: "alpine"
    pullPolicy: IfNotPresent

  labels: {}
  annotations: {}
  affinity: {}
  resources: {}
  nodeSelector:
    kubernetes.io/arch: amd64

  service:
    labels: {}
    annotations: {}
    externalIPs: []

  storage: "10Gi"
  storageClass:

ui:
  replicas: 1
  labels: {}
  annotations:
    reloader.stakater.com/auto: "true"
  affinity: {}
  resources: {}
  nodeSelector:
    kubernetes.io/arch: amd64
  service:
    labels: {}
    annotations: {}
    externalIPs: []
  sentry-dsn: ""
  image:
    repository: harmonidcaputo/open-balena-ui
    tag: latest
    pullPolicy: Always

remote:
  replicas: 1
  labels: {}
  annotations:
    reloader.stakater.com/auto: "true"
  affinity: {}
  resources: {}
  nodeSelector:
    kubernetes.io/arch: amd64
  service:
    labels: {}
    annotations: {}
    externalIPs: []
  sentry-dsn: ""
  image:
    repository: harmonidcaputo/open-balena-remote
    tag: latest
    pullPolicy: Always

postgrest:
  replicas: 1
  labels: {}
  annotations:
    reloader.stakater.com/auto: "true"
  affinity: {}
  resources: {}
  nodeSelector:
    kubernetes.io/arch: amd64
  service:
    labels: {}
    annotations: {}
    externalIPs: []
  sentry-dsn: ""
  image:
    repository: harmonidcaputo/open-balena-postgrest
    tag: latest
    pullPolicy: Always
  dbHost: openbalena-db.openbalena
  dbPort: 5432

builder:
  enabled: true
  replicas: 1
  image:
    repository: harmonidcaputo/open-balena-builder
    tag: "latest"
    pullPolicy: Always

  labels: {}
  annotations:
    reloader.stakater.com/auto: "true"
  affinity: {}
  resources: {}
  nodeSelector:
    kubernetes.io/arch: amd64

  # Need extended timeout for build and delta operations
  service:
    labels: {}
    annotations:
      haproxy-ingress.github.io/timeout-server: "6h"
    externalIPs: []
  
  storage: "10Gi"
  storageClass:

  amd64:
    enabled: true
    replicas: 1
    image:
      repository: docker
      tag: "24.0.7-dind"
      pullPolicy: IfNotPresent

    labels: {}
    annotations: {}
    affinity: {}
    resources: {}
    nodeSelector:
      kubernetes.io/arch: amd64

    service:
      labels: {}
      annotations: {}
      externalIPs: []
    
    storage: "10Gi"
    storageClass:

  arm64:
    enabled: false
    replicas: 1
    image:
      repository: docker
      tag: "24.0.7-dind"
      pullPolicy: IfNotPresent

    labels: {}
    annotations: {}
    affinity: {}
    resources: {}
    nodeSelector:
      kubernetes.io/arch: arm64

    service:
      labels: {}
      annotations: {}
      externalIPs: []
    
    storage: "10Gi"
    storageClass:

delta:
  enabled: true
  replicas: 1
  image:
    repository: harmonidcaputo/open-balena-delta
    tag: "latest"
    pullPolicy: Always

  labels: {}
  annotations:
    reloader.stakater.com/auto: "true"
  affinity: {}
  resources: {}
  nodeSelector:
    kubernetes.io/arch: amd64

  # Need extended timeout for build and delta operations
  service:
    labels: {}
    annotations:
      haproxy-ingress.github.io/timeout-server: "6h"
    externalIPs: []
  
  storage: "10Gi"
  storageClass:

helper:
  enabled: true
  replicas: 1
  image:
    repository: harmonidcaputo/open-balena-helper
    tag: "latest"
    pullPolicy: Always

  labels: {}
  annotations:
    reloader.stakater.com/auto: "true"
  affinity: {}
  resources: {}
  nodeSelector:
    kubernetes.io/arch: amd64

  service:
    labels: {}
    annotations: {}
    externalIPs: []
  
  storage: "10Gi"
  storageClass:

haproxy:
  controller:
    ingressClass: "openbalena-haproxy"
    ingressClassResource:
      enabled: true
    tcp:
      10000: openbalena/openbalena-remote:10000:PROXY-V2::openbalena/openbalena-tls
      10001: openbalena/openbalena-remote:10001:PROXY-V2::openbalena/openbalena-tls
      10002: openbalena/openbalena-remote:10002:PROXY-V2::openbalena/openbalena-tls
      10003: openbalena/openbalena-remote:10003:PROXY-V2::openbalena/openbalena-tls
      10004: openbalena/openbalena-remote:10004:PROXY-V2::openbalena/openbalena-tls
      10005: openbalena/openbalena-remote:10005:PROXY-V2::openbalena/openbalena-tls
      10006: openbalena/openbalena-remote:10006:PROXY-V2::openbalena/openbalena-tls
      10007: openbalena/openbalena-remote:10007:PROXY-V2::openbalena/openbalena-tls
      10008: openbalena/openbalena-remote:10008:PROXY-V2::openbalena/openbalena-tls
      10009: openbalena/openbalena-remote:10009:PROXY-V2::openbalena/openbalena-tls
    logs:
      enabled: true
    config:
      config-proxy: |-
          _front__tls
            # BEGIN::Redirect to openBalena VPN
            acl is_ssl req.ssl_ver 2:3.4
            use_backend {{ .Release.Namespace }}_openbalena-vpn_443 if !is_ssl
            # END::Redirect to openBalena VPN
      timeout-server: "75s"
      timeout-server-fin: "75s"
      timeout-client: "75s"
      timeout-client-fin: "75s"
    nodeSelector:
      kubernetes.io/arch: amd64

reloader:
  reloader:
    deployment:
      nodeSelector:
        kubernetes.io/arch: amd64

loki:
  nameOverride: openbalena-loki
  loki:
    auth_enabled: false
    storage:
      s3:
        endpoint: openbalena-s3
        insecure: true
        s3ForcePathStyle: true
        region: us-east-1
        accessKeyId: ${S3_LOKI_ACCESS_KEY_ID}
        secretAccessKey: ${S3_LOKI_SECRET_ACCESS_KEY}
      bucketNames:
        admin: loki
        chunks: loki
        ruler: loki
    limits_config:
      ingestion_rate_mb: 100
      ingestion_burst_size_mb: 100
      max_entries_limit_per_query: 0
      max_global_streams_per_user: 0
  gateway:
    replicas: 1
    nodeSelector:
      kubernetes.io/arch: amd64
    affinity: []
  backend:
    replicas: 2
    nodeSelector:
      kubernetes.io/arch: amd64
    affinity: []
    annotations:
      reloader.stakater.com/auto: "true"
    extraArgs:
      - '-config.expand-env=true'
    extraEnv:
      - name: S3_LOKI_ACCESS_KEY_ID
        valueFrom:
          secretKeyRef:
            name: openbalena-s3-keys
            key: access-key
      - name: S3_LOKI_SECRET_ACCESS_KEY
        valueFrom:
          secretKeyRef:
            name: openbalena-s3-keys
            key: secret-key
    persistence:
      enableStatefulSetAutoDeletePVC: true
      size: 10Gi
      storageClass:
      selector:
        matchLabels: 
          app: openbalena-loki-backend
  read:
    replicas: 2
    nodeSelector:
      kubernetes.io/arch: amd64
    affinity: []
    annotations:
      reloader.stakater.com/auto: "true"
    extraArgs:
      - '-config.expand-env=true'
    extraEnv:
      - name: S3_LOKI_ACCESS_KEY_ID
        valueFrom:
          secretKeyRef:
            name: openbalena-s3-keys
            key: access-key
      - name: S3_LOKI_SECRET_ACCESS_KEY
        valueFrom:
          secretKeyRef:
            name: openbalena-s3-keys
            key: secret-key
  write:
    replicas: 2
    nodeSelector:
      kubernetes.io/arch: amd64
    affinity: []
    annotations:
      reloader.stakater.com/auto: "true"
    extraArgs:
      - '-config.expand-env=true'
    extraEnv:
      - name: S3_LOKI_ACCESS_KEY_ID
        valueFrom:
          secretKeyRef:
            name: openbalena-s3-keys
            key: access-key
      - name: S3_LOKI_SECRET_ACCESS_KEY
        valueFrom:
          secretKeyRef:
            name: openbalena-s3-keys
            key: secret-key
    persistence:
      enableStatefulSetAutoDeletePVC: true
      size: 10Gi
      storageClass:
      selector:
        matchLabels: 
          app: openbalena-loki-write
  monitoring:
    lokiCanary:
      enabled: false
    selfMonitoring:
      enabled: false
      grafanaAgent:
        installOperator: false
    serviceMonitor:
      enabled: false
  test:
    enabled: false

promtail:
  configmap:
    enabled: true
  extraPorts:
    syslog:
      name: tcp-syslog
      containerPort: 1514
      protocol: TCP
  config:
    clients:
      - url: http://openbalena-loki-gateway/loki/api/v1/push
    logFormat: json
    snippets:
      extraScrapeConfigs: |
        - job_name: node_journal
          journal:
            json: false
            max_age: 12h
            path: /var/log/journal
            matches: _SYSTEMD_UNIT=kubelet.service _SYSTEMD_UNIT=containerd.service
            labels:
              job: systemd-journal
          relabel_configs:
            - source_labels: ['__journal__hostname']
              target_label: pod
            - source_labels: ['__journal__systemd_unit']
              target_label: app
            - source_labels: ['__journal_priority_keyword']
              target_label: level
        - job_name: pod_syslog
          syslog:
            listen_address: 0.0.0.0:1514
            labels:
              job: syslog
          relabel_configs:
            - source_labels: ['__syslog_message_hostname']
              target_label: pod
            - source_labels: ['__syslog_message_app_name']
              target_label: app
            - source_labels: ['__syslog_message_severity']
              target_label: level
            - source_labels: ['__syslog_message_facility']
              target_label: facility
  extraVolumes:
    - name: journal
      hostPath:
        path: /var/log/journal
    - name: machine-id
      hostPath:
        path: /etc/machine-id
  extraVolumeMounts:
    - name: journal
      mountPath: /var/log/journal
      readOnly: true
    - name: machine-id
      mountPath: /etc/machine-id
      readOnly: true