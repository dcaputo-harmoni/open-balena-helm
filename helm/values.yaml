global:
  hostname: ""
  email: "admin@openbalena.io"
  password: "password"
  production-mode: true
  ssh-authorized-keys: ""

  loki:
    server:
    port: 9095
    writePct: 100

  promtail:
    server:
    port: 1514

  db:
    server:
    port: 5432
    ssl: 
      enabled: false
      rejectUnauthorized: true
    user: "docker"
    password: "password"
    name: "resin"
    role: "docker"
    replica:
      enabled: false
      server:
      port: 5432

  s3:
    server:
    registryBucket: "registry-data"
    registryStoragePath: "/data"
    imageBucket: "image-data"
    imageStoragePrefix: "images"
    region: "us-east-1"
    accesskey: ""
    secretkey: ""

    cloudfront:
      endpoint:
      keypair:
      privatekey:
  
  redis:
    server:
    port: 6379
    clusterMode: false

  keys:
    cookie-secret:
    jwt-secret:
    service-api-key:
    api-vpn-service-api-key:
    registry-secret-key:
    token-auth-builder-token:
    vpn-dhparams:

  tolerations:

secrets:
  create: true

issuers:
  acme:
    enabled: true
    name: openbalena-certificate-issuer
    server: "https://acme-v02.api.letsencrypt.org/directory"
    email: "validemail@yourdomain.com"
    nodeSelector:
    tolerations:
ingress:
  ingressClassName: openbalena-haproxy
  annotations: {}
  http:
    annotations: {}
  tunnel:
    annotations: {}
  vpn:
    annotations: {}

api:
  replicas: 1
  image:
    repository: balena/open-balena-api
    tag: "v14.13.3"
    pullPolicy: IfNotPresent

  labels: {}
  annotations: {}
  affinity: {}
  resources: {}
  nodeSelector:
  tolerations:

  service:
    labels: {}
    annotations: {}
    externalIPs: []

  sentry-dsn: ""

  contractsPrivateRepoOwner:
  contractsPrivateRepoName:
  contractsPrivateRepoBranch:
  contractsPrivateRepoToken:

vpn:
  replicas: 1
  image:
    repository: balena/open-balena-vpn
    tag: "v11.29.17"
    pullPolicy: IfNotPresent

  labels: {}
  annotations: {}
  affinity: {}
  resources: {}
  nodeSelector:
  tolerations:

  service:
    labels: {}
    annotations: {}
    externalIPs: []

  sentry-dsn: ""
  instanceCount: 1

registry:
  replicas: 1
  image:
    repository: balena/open-balena-registry
    tag: "v2.39.23"
    pullPolicy: IfNotPresent

  disableRedirect: false
  disableUploadPurging: true

  labels: {}
  annotations: {}
  affinity: {}
  resources: {}
  nodeSelector:
  tolerations:

  service:
    labels: {}
    annotations: {}
    externalIPs: []

s3:
  enabled: true
  replicas: 1
  image:
    repository: balena/open-balena-s3
    tag: "v2.28.12"
    pullPolicy: IfNotPresent

  labels: {}
  annotations: {}
  affinity: {}
  resources: {}
  nodeSelector:
  tolerations:

  service:
    labels: {}
    annotations: {}
    externalIPs: []

  storage: "25Gi"
  storageClass:

  autoCreateBuckets: "registry-data;image-data;loki"

db:
  enabled: true
  replicas: 1
  image:
    repository: balena/open-balena-db
    tag: "v5.2.1"
    pullPolicy: IfNotPresent

  labels: {}
  annotations: {}
  affinity: {}
  resources: {}
  nodeSelector:
  tolerations:

  service:
    labels: {}
    annotations: {}
    externalIPs: []

  storage: "10Gi"
  storageClass:

  ## Start PostgreSQL pod without limitations on shm memory.
  ## By default docker and containerd limit `/dev/shm` to `64M`
  ## ref: https://github.com/docker-library/postgres/issues/416
  ## ref: https://github.com/containerd/containerd/issues/3654
  ##
  shmVolume:
    ## @param db.shmVolume.enabled Enable emptyDir volume for /dev/shm for PostgreSQL pod(s)
    ##
    enabled: true
    ## @param db.shmVolume.sizeLimit Set this to enable a size limit on the shm tmpfs
    ## Note: the size of the tmpfs counts against container's memory limit
    ## e.g:
    ## sizeLimit: 1Gi
    ##
    sizeLimit: ""

redis:
  enabled: true
  replicas: 1
  image:
    repository: redis
    tag: "alpine"
    pullPolicy: IfNotPresent

  labels: {}
  annotations: {}
  affinity: {}
  resources: {}
  nodeSelector:
  tolerations:

  service:
    labels: {}
    annotations: {}
    externalIPs: []

  storage: "10Gi"
  storageClass:

ui:
  replicas: 1
  labels: {}
  annotations: {}
  affinity: {}
  resources: {}
  nodeSelector:
  tolerations:
  service:
    labels: {}
    annotations: {}
    externalIPs: []
  sentry-dsn: ""
  image:
    repository: harmonidcaputo/open-balena-ui
    tag: latest
    pullPolicy: Always
  bannerImage:

remote:
  replicas: 1
  labels: {}
  annotations: {}
  affinity: {}
  resources: {}
  nodeSelector:
  tolerations:
  service:
    labels: {}
    annotations: {}
    externalIPs: []
  sentry-dsn: ""
  image:
    repository: harmonidcaputo/open-balena-remote
    tag: latest
    pullPolicy: Always

postgrest:
  replicas: 1
  labels: {}
  annotations: {}
  affinity: {}
  resources: {}
  nodeSelector:
  tolerations:
  service:
    labels: {}
    annotations: {}
    externalIPs: []
  sentry-dsn: ""
  image:
    repository: harmonidcaputo/open-balena-postgrest
    tag: latest
    pullPolicy: Always

builder:
  enabled: true
  replicas: 1
  image:
    repository: harmonidcaputo/open-balena-builder
    tag: "latest"
    pullPolicy: Always

  labels: {}
  annotations: {}
  affinity: {}
  resources: {}
  nodeSelector:
  tolerations:
  # Need extended timeout for build and delta operations
  service:
    labels: {}
    annotations:
      haproxy-ingress.github.io/timeout-server: "6h"
    externalIPs: []
  
  storage: "10Gi"
  storageClass:

  amd64:
    enabled: true
    replicas: 1
    image:
      repository: docker
      tag: "27.3.1-dind"
      pullPolicy: IfNotPresent

    labels: {}
    annotations: {}
    affinity: {}
    resources: {}
    nodeSelector:
    tolerations:

    service:
      labels: {}
      annotations: {}
      externalIPs: []
    
    persistence:
      enabled: false
      # storage: "100Gi"
      # storageClass: default

  arm64:
    enabled: false
    replicas: 1
    image:
      repository: docker
      tag: "27.3.1-dind"
      pullPolicy: IfNotPresent

    labels: {}
    annotations: {}
    affinity: {}
    resources: {}
    nodeSelector:
      kubernetes.io/arch: arm64
    tolerations:

    service:
      labels: {}
      annotations: {}
      externalIPs: []
    
    persistence:
      enabled: false
      # storage: "100Gi"
      # storageClass: default

delta:
  enabled: true
  replicas: 1
  image:
    repository: harmonidcaputo/open-balena-delta
    tag: "latest"
    pullPolicy: Always

  labels: {}
  annotations: {}
  affinity: {}
  resources: {}
  nodeSelector:
  tolerations:

  # Need extended timeout for build and delta operations
  service:
    labels: {}
    annotations:
      haproxy-ingress.github.io/timeout-server: "6h"
    externalIPs: []
  
  storage: "10Gi"
  storageClass:

helper:
  enabled: true
  replicas: 1
  image:
    repository: harmonidcaputo/open-balena-helper
    tag: "latest"
    pullPolicy: Always

  labels: {}
  annotations: {}
  affinity: {}
  resources: {}
  nodeSelector:
  tolerations:

  service:
    labels: {}
    annotations: {}
    externalIPs: []
  
  storage: "10Gi"
  storageClass:

haproxy:
  controller:
    ingressClass: "openbalena-haproxy"
    ingressClassResource:
      enabled: true
    tcp:
      10000: "{{ .Release.Namespace }}/openbalena-remote:10000:PROXY-V2::{{ .Release.Namespace }}/openbalena-tls"
      10001: "{{ .Release.Namespace }}/openbalena-remote:10001:PROXY-V2::{{ .Release.Namespace }}/openbalena-tls"
      10002: "{{ .Release.Namespace }}/openbalena-remote:10002:PROXY-V2::{{ .Release.Namespace }}/openbalena-tls"
      10003: "{{ .Release.Namespace }}/openbalena-remote:10003:PROXY-V2::{{ .Release.Namespace }}/openbalena-tls"
      10004: "{{ .Release.Namespace }}/openbalena-remote:10004:PROXY-V2::{{ .Release.Namespace }}/openbalena-tls"
      10005: "{{ .Release.Namespace }}/openbalena-remote:10005:PROXY-V2::{{ .Release.Namespace }}/openbalena-tls"
      10006: "{{ .Release.Namespace }}/openbalena-remote:10006:PROXY-V2::{{ .Release.Namespace }}/openbalena-tls"
      10007: "{{ .Release.Namespace }}/openbalena-remote:10007:PROXY-V2::{{ .Release.Namespace }}/openbalena-tls"
      10008: "{{ .Release.Namespace }}/openbalena-remote:10008:PROXY-V2::{{ .Release.Namespace }}/openbalena-tls"
      10009: "{{ .Release.Namespace }}/openbalena-remote:10009:PROXY-V2::{{ .Release.Namespace }}/openbalena-tls"
    logs:
      enabled: true
    config:
      config-proxy: |-
          _front__tls
            # BEGIN::Redirect to openBalena VPN
            acl is_ssl req.ssl_ver 2:3.4
            use_backend {{ .Release.Namespace }}_openbalena-vpn_443 if !is_ssl
            # END::Redirect to openBalena VPN
      timeout-server: "75s"
      timeout-server-fin: "75s"
      timeout-client: "75s"
      timeout-client-fin: "75s"
    nodeSelector:
    tolerations: