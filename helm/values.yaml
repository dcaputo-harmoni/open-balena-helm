global:
  hostname: ""
  email: "admin@openbalena.io"
  password: "password"
  production-mode: false
  ssh-authorized-keys: ""
  db:
    user: "docker"
    password: "docker"

  s3:
    bucket: "registry-data"
    endpoint: ""
    region: "us-east-1"
    accesskey: ""
    secretkey: ""
    storagePath: "/data"
    cloudfront:
      endpoint:
      keypair:
      privatekey:

  keys:
    cookie-secret:
    jwt-secret:
    service-api-key:
    api-vpn-service-api-key:
    registry-secret-key:
    token-auth-builder-token:
    vpn-dhparams:

secrets:
  create: true

ingress:
  ingressClassName: openbalena-haproxy
  annotations: {}
  http:
    annotations: {}
  tunnel:
    annotations: {}
  vpn:
    annotations: {}

api:
  replicas: 1
  image:
    repository: balena/open-balena-api
    tag: "v11.8.3"
    pullPolicy: IfNotPresent

  labels: {}
  annotations: {}
  affinity: {}
  resources: {}
  nodeSelector: {}

  service:
    labels: {}
    annotations: {}
    externalIPs: []

  sentry-dsn: ""

  lokiHost: loki-write
  lokiPort: 9095
  lokiWritePct: 100

vpn:
  replicas: 1
  image:
    repository: balena/open-balena-vpn
    tag: "v11.26.0"
    pullPolicy: IfNotPresent

  labels: {}
  annotations: {}
  affinity: {}
  resources: {}
  nodeSelector: {}

  service:
    labels: {}
    annotations: {}
    externalIPs: []

  sentry-dsn: ""

registry:
  replicas: 1
  image:
    repository: balena/open-balena-registry
    tag: "v2.37.2"
    pullPolicy: IfNotPresent

  disableRedirect: false

  labels: {}
  annotations: {}
  affinity: {}
  resources: {}
  nodeSelector: {}

  service:
    labels: {}
    annotations: {}
    externalIPs: []

s3:
  enabled: true
  replicas: 1
  image:
    repository: balena/open-balena-s3
    tag: "v2.25.2"
    pullPolicy: IfNotPresent

  labels: {}
  annotations: {}
  affinity: {}
  resources: {}
  nodeSelector: {}

  service:
    labels: {}
    annotations: {}
    externalIPs: []

  storage: "25Gi"
  storageClass:

db:
  replicas: 1
  image:
    repository: balena/open-balena-db
    tag: "v5.2.1"
    pullPolicy: IfNotPresent

  labels: {}
  annotations: {}
  affinity: {}
  resources: {}
  nodeSelector: {}

  service:
    labels: {}
    annotations: {}
    externalIPs: []

  storage: "10Gi"
  storageClass:

  ## Start PostgreSQL pod without limitations on shm memory.
  ## By default docker and containerd limit `/dev/shm` to `64M`
  ## ref: https://github.com/docker-library/postgres/issues/416
  ## ref: https://github.com/containerd/containerd/issues/3654
  ##
  shmVolume:
    ## @param db.shmVolume.enabled Enable emptyDir volume for /dev/shm for PostgreSQL pod(s)
    ##
    enabled: true
    ## @param db.shmVolume.sizeLimit Set this to enable a size limit on the shm tmpfs
    ## Note: the size of the tmpfs counts against container's memory limit
    ## e.g:
    ## sizeLimit: 1Gi
    ##
    sizeLimit: ""

redis:
  replicas: 1
  image:
    repository: redis
    tag: "alpine"
    pullPolicy: IfNotPresent

  labels: {}
  annotations: {}
  affinity: {}
  resources: {}
  nodeSelector: {}

  service:
    labels: {}
    annotations: {}
    externalIPs: []

  storage: "10Gi"
  storageClass:

haproxy:
  controller:
    ingressClass: "openbalena-haproxy"
    ingressClassResource:
      enabled: true
    config:
      config-proxy: |-
          _front__tls
            # BEGIN::Redirect to openBalena VPN
            acl is_ssl req.ssl_ver 2:3.4
            use_backend {{ .Release.Namespace }}_openbalena-vpn_443 if !is_ssl
            # END::Redirect to openBalena VPN

loki:
  loki:
    auth_enabled: false
    storage:
      s3:
        endpoint: openbalena-s3
        insecure: true
        s3ForcePathStyle: true
        region: us-east-1
        accessKeyId: \${S3_LOKI_ACCESS_KEY_ID}
        secretAccessKey: \${S3_LOKI_SECRET_ACCESS_KEY}
      bucketNames:
        admin: loki
        chunks: loki
        ruler: loki
  backend:
    replicas: 2
    extraArgs:
      - '-config.expand-env=true'
    extraEnv:
      - name: S3_LOKI_ACCESS_KEY_ID
        valueFrom:
          secretKeyRef:
            name: openbalena-s3-keys
            key: access-key
      - name: S3_LOKI_SECRET_ACCESS_KEY
        valueFrom:
          secretKeyRef:
            name: openbalena-s3-keys
            key: secret-key
  read:
    replicas: 2
    extraArgs:
      - '-config.expand-env=true'
    extraEnv:
      - name: S3_LOKI_ACCESS_KEY_ID
        valueFrom:
          secretKeyRef:
            name: openbalena-s3-keys
            key: access-key
      - name: S3_LOKI_SECRET_ACCESS_KEY
        valueFrom:
          secretKeyRef:
            name: openbalena-s3-keys
            key: secret-key
  write:
    replicas: 2
    extraArgs:
      - '-config.expand-env=true'
    extraEnv:
      - name: S3_LOKI_ACCESS_KEY_ID
        valueFrom:
          secretKeyRef:
            name: openbalena-s3-keys
            key: access-key
      - name: S3_LOKI_SECRET_ACCESS_KEY
        valueFrom:
          secretKeyRef:
            name: openbalena-s3-keys
            key: secret-key
  monitoring:
    lokiCanary:
      enabled: false
    selfMonitoring:
      enabled: false
    serviceMonitor:
      enabled: false
  test:
    enabled: false
