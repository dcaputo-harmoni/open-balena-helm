apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "openbalena.fullname" . }}-registry
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "openbalena.labels" . | nindent 4 }}
    app.kubernetes.io/component: registry

    {{- with .Values.registry.labels }}
    {{- toYaml . | nindent 4 }}
    {{- end }}
  {{- with .Values.registry.annotations }}
  annotations:
    {{- toYaml . | nindent 4 }}
  {{- end }}
spec:
  {{- with .Values.registry.affinity }}
  affinity:
    {{- toYaml . | nindent 4 }}
  {{- end }}
  selector:
    matchLabels:
      {{- include "openbalena.selectorLabels" . | nindent 6 }}
      app.kubernetes.io/component: registry

      {{- with .Values.registry.labels }}
      {{- toYaml . | nindent 6 }}
      {{- end }}
  replicas: {{ .Values.registry.replicas }}
  template:
    metadata:
      labels:
        {{- include "openbalena.selectorLabels" . | nindent 8 }}
        app.kubernetes.io/component: registry

        {{- with .Values.registry.labels }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
    spec:
      initContainers:
      - name: wait-for-promtail
        image: busybox:latest
        command:
        - /bin/sh
        - -c
        - >
          until nc -vz {{ .Values.global.promtail.server }} {{ .Values.global.promtail.port }};
            do echo "Waiting for {{ .Values.global.promtail.server }}:{{ .Values.global.promtail.port }}";
            sleep 1;
          done
      containers:
      - name: {{ .Chart.Name }}-registry
        image: {{ .Values.registry.image.repository }}:{{ .Values.registry.image.tag }}
        imagePullPolicy: {{ .Values.registry.image.pullPolicy }}
        {{- with .Values.registry.resources }}
        resources:
          {{- toYaml . | nindent 10 }}
        {{- end }}
        ports:
          - name: http
            containerPort: 80
        securityContext:
          privileged: true
          capabilities:
            add: ["SYS_ADMIN", "SYS_RESOURCE"]
        env:
        - name: CONFD_BACKEND
          value: "ENV"
        - name: BALENA_TLD
          value: "{{ .Values.global.hostname }}"
        - name: REGISTRY2_HOST
          value: "registry.{{ .Values.global.hostname }}"
        - name: REGISTRY2_TOKEN_AUTH_ISSUER
          value: "api.{{ .Values.global.hostname }}"
        - name: REGISTRY2_TOKEN_AUTH_REALM
          value: "https://api.{{ .Values.global.hostname }}/auth/v1/token"
        - name: COMMON_REGION
          value: "{{ index .Values "global" "s3" "region" }}"
        - name: REGISTRY2_PROXY_ENABLED
          value: "false"
        - name: REGISTRY2_CACHE_ENABLED
          value: "false"
        - name: REGISTRY2_CACHE_ADDR
          value: "127.0.0.1:6379"
        - name: REGISTRY2_CACHE_DB
          value: "0"
        - name: REGISTRY2_CACHE_MAXMEMORY_MB
          value: "1024" # Megabytes
        - name: REGISTRY2_CACHE_MAXMEMORY_POLICY
          value: "allkeys-lru"
        - name: REGISTRY2_S3_REGION_ENDPOINT
          value: "https://s3.{{ .Values.global.hostname }}"
        - name: REGISTRY2_S3_BUCKET
          value: "{{ .Values.global.s3.registryBucket }}"
        - name: REGISTRY2_STORAGEPATH
          value: "{{ .Values.global.s3.registryStoragePath }}"
        - name: REGISTRY2_S3_KEY
          valueFrom:
            secretKeyRef:
              name: openbalena-s3-keys
              key: access-key
        - name: REGISTRY2_S3_SECRET
          valueFrom:
            secretKeyRef:
              name: openbalena-s3-keys
              key: secret-key
        - name: REGISTRY2_SECRETKEY
          valueFrom:
            secretKeyRef:
              name: openbalena-registry-http
              key: secret
        - name: REGISTRY2_DISABLE_UPLOAD_PURGING
          value: "{{ .Values.registry.disableUploadPurging }}"

        {{- if .Values.registry.disableRedirect }}
        - name: REGISTRY2_DISABLE_REDIRECT
          value: "true"
        {{- end }}

        {{- if .Values.global.s3.cloudfront.endpoint }}
        - name: REGISTRY2_S3_CLOUDFRONT_ENDPOINT
          value: "{{ .Values.global.s3.cloudfront.endpoint }}"
        - name: REGISTRY2_S3_CLOUDFRONT_KEYPAIR_ID
          value: "{{ .Values.global.s3.cloudfront.keypair }}"
        - name: REGISTRY2_S3_CLOUDFRONT_PRIVATEKEY
          value: "{{ .Values.global.s3.cloudfront.privatekey }}"
        {{- end }}

        volumeMounts:
        - mountPath: /run
          name: run
        - mountPath: /sys/fs/cgroup
          name: cgroup
        - mountPath: /certs/root
          name: cert-root
        - mountPath: /certs/vpn
          name: cert-vpn
        - mountPath: /certs/vpn-dhparams
          name: cert-vpn-dhparams
        - mountPath: /certs/api
          name: cert-api
        lifecycle:
          postStart:
            exec:
              command:
                - "sh"
                - "-c"
                - >
                  echo '[Unit]\nDescription=Registry garbage-collect service\n\n[Service]\nType=oneshot\nExecStart=/usr/local/bin/docker-registry garbage-collect /etc/docker-registry.yml -m' > /etc/systemd/system/registry-garbage-collect.service;
                  echo '[Unit]\nDescription=Registry garbage-collect timer\n\n[Timer]\nUnit=registry-garbage-collect.service\nOnCalendar=Sat 20:00\n\n[Install]\nWantedBy=timers.target' > /etc/systemd/system/registry-garbage-collect.timer;
                  ln -s /etc/systemd/system/registry-garbage-collect.timer /etc/systemd/system/timers.target.wants/registry-garbage-collect.timer;
                  systemctl enable --now registry-garbage-collect.timer;
                  mkdir /balena;
                  touch /balena/{{ .Values.global.hostname }}.env;
                  mkdir /certs/private;
                  ln -s /certs/vpn/issuing_ca /certs/ca-bundle.pem;
                  ln -s /certs/vpn/certificate /certs/private/vpn.{{ .Values.global.hostname }}.pem;
                  ln -s /certs/vpn/private_key /certs/private/vpn.{{ .Values.global.hostname }}.key;
                  ln -s /certs/vpn-dhparams/dhparams /certs/private/dhparam.{{ .Values.global.hostname }}.pem;
                  ln -s /certs/api/certificate /certs/private/api.{{ .Values.global.hostname }}.pem;
                  ln -s /certs/api/private_key /certs/private/api.{{ .Values.global.hostname }}.key;
                  openssl ec -pubout -outform der -in /certs/api/private_key | sha256sum | head -c 60 | xxd -r -p | base32 | fold -w4 | paste -sd : | tr -d '\n' > /certs/private/api.{{ .Values.global.hostname }}.kid;
                  echo 'module(load="imjournal")\nmodule(load="mmjsonparse")\n$imjournalRatelimitInterval 0\n$imjournalRatelimitBurst 0\n*.* action(type="omfwd" Target="openbalena-promtail-syslog" Port="1514" Protocol="tcp" Template="RSYSLOG_SyslogProtocol23Format" TCP_Framing="octet-counted")' > /etc/rsyslog.d/00-promtail-relay.conf;
      volumes:
      - name: run
        emptyDir:
          medium: Memory
      - name: cgroup
        emptyDir:
          medium: Memory
      - name: cert-root
        secret:
          secretName: openbalena-pki-root
      - name: cert-vpn
        secret:
          secretName: openbalena-pki-vpn
      - name: cert-vpn-dhparams
        secret:
          secretName: openbalena-vpn-dhparams
      - name: cert-api
        secret:
          secretName: openbalena-pki-api

      {{- with .Values.registry.nodeSelector  }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
